#ifndef LCD_FONTS
#define LCD_FONTS

///////////////////////////////////////////////////////////
// LCD FONTS
///////////////////////////////////////////////////////////
enum { FONT_NUM_5X7, FONT_NUM_8x16, FONT_7SEG_5x7}	// V1.5 List all available fonts

// Font mapping is defined as follow :
// Font is 8 pix fixed width, 16 pix fixed height (2 bytes)
// organization is : row0, row1, row0, row1 ...
// for caracters spacing, the display function must add 0,0 at each
// start and end of fonct definition 

rom unsigned char font_num_8x16[] = {  16,					// caracter byte lenght = offset
								1,							// Y Pages used by 1 character	!! expressed in 2^n (1 means 2)
								1,							// leading pixels to add before
							  '0',							// font first caracter coded
240,15,248,31,28,56,12,48,12,48,28,56,248,31,240,15, 		// Code for char 0  
0,0,96,0,48,0,24,0,252,63,252,63,0,0,0,0,					// Code for char 1  
48,48,56,56,28,60,12,54,12,55,140,51,248,49,112,48, 		// Code for char 2  
16,12,24,28,12,56,204,48,204,48,204,57,252,31,56,15, 		// Code for char 3  
0,14,0,15,192,13,224,12,56,12,252,63,252,63,0,12,			// Code for char 4  
224,13,252,29,252,56,204,48,204,48,204,57,140,31,0,15, 		// Code for char 5  
224,7,248,31,156,57,204,48,204,48,204,49,156,31,24,15, 		// Code for char 6  
12,0,12,0,12,60,140,63,236,7,124,0,28,0,12,0,				// Code for char 7  
112,14,248,31,140,49,140,49,140,49,140,49,248,31,112,14, 	// Code for char 8  
240,24,248,57,140,51,12,51,12,51,156,57,248,31,224,7 		// Code for char 9  
};

rom uchar font_5x8[] = {   5,							// caracter byte lenght = offset !!
						    0,							// Y Pages used by 1 character	expressed in 2^n (1 means 2)
						    1,							// leading pixels to add before
						  ' ',							// font first caracter coded
						 0x00, 0x00, 0x00, 0x00, 0x00, // SPACE
                         0x00, 0x00, 0x5F, 0x00, 0x00, // !
                         0x00, 0x03, 0x00, 0x03, 0x00, // "
                         0x14, 0x3E, 0x14, 0x3E, 0x14, // #
                         0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
                         0x43, 0x33, 0x08, 0x66, 0x61, // %
                         0x36, 0x49, 0x55, 0x22, 0x50, // &
                         0x00, 0x05, 0x03, 0x00, 0x00, // '
                         0x00, 0x1C, 0x22, 0x41, 0x00, // (
                         0x00, 0x41, 0x22, 0x1C, 0x00, // )
                         0x14, 0x08, 0x3E, 0x08, 0x14, // star
                         0x08, 0x08, 0x3E, 0x08, 0x08, // +
                         0x00, 0x50, 0x30, 0x00, 0x00, // ,
                         0x08, 0x08, 0x08, 0x08, 0x08, // -
                         0x00, 0x60, 0x60, 0x00, 0x00, // .
                         0x20, 0x10, 0x08, 0x04, 0x02, // slash
                         0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
                         0x04, 0x02, 0x7F, 0x00, 0x00, // 1
                         0x42, 0x61, 0x51, 0x49, 0x46, // 2
                         0x22, 0x41, 0x49, 0x49, 0x36, // 3
                         0x18, 0x14, 0x12, 0x7F, 0x10, // 4
                         0x27, 0x45, 0x45, 0x45, 0x39, // 5
                         0x3E, 0x49, 0x49, 0x49, 0x32, // 6
                         0x01, 0x01, 0x71, 0x09, 0x07, // 7
                         0x36, 0x49, 0x49, 0x49, 0x36, // 8
                         0x26, 0x49, 0x49, 0x49, 0x3E, // 9
                         0x00, 0x36, 0x36, 0x00, 0x00, // :
                         0x00, 0x56, 0x36, 0x00, 0x00, // ;
                         0x08, 0x14, 0x22, 0x41, 0x00, // <
                         0x14, 0x14, 0x14, 0x14, 0x14, // =
                         0x00, 0x41, 0x22, 0x14, 0x08, // >
                         0x02, 0x01, 0x51, 0x09, 0x06, // ?
                         0x3E, 0x41, 0x59, 0x55, 0x5E, // @
                         0x7E, 0x09, 0x09, 0x09, 0x7E, // A
                         0x7F, 0x49, 0x49, 0x49, 0x36, // B
                         0x3E, 0x41, 0x41, 0x41, 0x22, // C
                         0x7F, 0x41, 0x41, 0x41, 0x3E, // D
                         0x7F, 0x49, 0x49, 0x49, 0x41, // E
                         0x7F, 0x09, 0x09, 0x09, 0x01, // F
                         0x3E, 0x41, 0x41, 0x49, 0x3A, // G
                         0x7F, 0x08, 0x08, 0x08, 0x7F, // H
                         0x00, 0x41, 0x7F, 0x41, 0x00, // I
                         0x30, 0x40, 0x40, 0x40, 0x3F, // J
                         0x7F, 0x08, 0x14, 0x22, 0x41, // K
                         0x7F, 0x40, 0x40, 0x40, 0x40, // L
                         0x7F, 0x02, 0x0C, 0x02, 0x7F, // M
                         0x7F, 0x02, 0x04, 0x08, 0x7F, // N
                         0x3E, 0x41, 0x41, 0x41, 0x3E, // O
                         0x7F, 0x09, 0x09, 0x09, 0x06, // P
                         0x1E, 0x21, 0x21, 0x21, 0x5E, // Q
                         0x7F, 0x09, 0x09, 0x09, 0x76, // R
						 0x26, 0x49, 0x49, 0x49, 0x32, // S
                         0x01, 0x01, 0x7F, 0x01, 0x01, // T
                         0x3F, 0x40, 0x40, 0x40, 0x3F, // U
                         0x1F, 0x20, 0x40, 0x20, 0x1F, // V
                         0x7F, 0x20, 0x10, 0x20, 0x7F, // W
                         0x41, 0x22, 0x1C, 0x22, 0x41, // X
                         0x07, 0x08, 0x70, 0x08, 0x07, // Y
                         0x61, 0x51, 0x49, 0x45, 0x43, // Z
                         0x00, 0x7F, 0x41, 0x00, 0x00, // [
                         0x02, 0x04, 0x08, 0x10, 0x20, // antislash

                         0x00, 0x00, 0x41, 0x7F, 0x00, // ]
                         0x04, 0x02, 0x01, 0x02, 0x04, // ^
                         0x40, 0x40, 0x40, 0x40, 0x40, // _
                         0x00, 0x01, 0x02, 0x04, 0x00, // `
                         0x20, 0x54, 0x54, 0x54, 0x78, // a
                         0x7F, 0x44, 0x44, 0x44, 0x38, // b
                         0x38, 0x44, 0x44, 0x44, 0x44, // c
                         0x38, 0x44, 0x44, 0x44, 0x7F, // d
                         0x38, 0x54, 0x54, 0x54, 0x18, // e
                         0x04, 0x04, 0x7E, 0x05, 0x05, // f
                         0x08, 0x54, 0x54, 0x54, 0x3C, // g
                         0x7F, 0x08, 0x04, 0x04, 0x78, // h
                         0x00, 0x44, 0x7D, 0x40, 0x00, // i
                         0x20, 0x40, 0x44, 0x3D, 0x00, // j
                         0x7F, 0x10, 0x28, 0x44, 0x00, // k
                         0x00, 0x41, 0x7F, 0x40, 0x00, // l
                         0x7C, 0x04, 0x78, 0x04, 0x78, // m
                         0x7C, 0x08, 0x04, 0x04, 0x78, // n
                         0x38, 0x44, 0x44, 0x44, 0x38, // o
                         0x7C, 0x14, 0x14, 0x14, 0x08, // p
                         0x08, 0x14, 0x14, 0x14, 0x7C, // q
                         0x00, 0x7C, 0x08, 0x04, 0x04, // r
                         0x48, 0x54, 0x54, 0x54, 0x20, // s
                         0x04, 0x04, 0x3F, 0x44, 0x44, // t
                         0x3C, 0x40, 0x40, 0x20, 0x7C, // u
                         0x1C, 0x20, 0x40, 0x20, 0x1C, // v
                         0x3C, 0x40, 0x30, 0x40, 0x3C, // w
                         0x44, 0x28, 0x10, 0x28, 0x44, // x
                         0x0C, 0x50, 0x50, 0x50, 0x3C, // y
                         0x44, 0x64, 0x54, 0x4C, 0x44, // z
                         0x00, 0x08, 0x36, 0x41, 0x41, // {
                         0x00, 0x00, 0x7F, 0x00, 0x00, // |
                         0x41, 0x41, 0x36, 0x08, 0x00, // }
                         0x02, 0x01, 0x02, 0x04, 0x02,  // ~
						 0xFF,0xFF,0xC3,0x81,0x00,		// JDS : left inverted corner
						 0x00,0x81,0xC3,0xFF,0xFF		// JDS : right inverted corner
						 
						 };


rom uchar font_7seg_5x8[] = {   5,						// caracter byte lenght = offset !!
						    	0,						// Y Pages used by 1 character	expressed in 2^n (1 means 2)
						    	2,						// leading pixels to add before
						  	  ' ',						// font first caracter coded : custom ascii table
0x00,0x00,0x00,0x00,0x00,	//  
0x00,0x00,0x00,0x00,0x00,	// !
0x0E,0x00,0x00,0x00,0x0E,	// "
0x0C,0x12,0x12,0x12,0x0C,	// #
0x0C,0x92,0x92,0x92,0x60,	// $
0xEC,0x12,0x12,0x12,0x0C,	// %
0x60,0x92,0x92,0x92,0x6C,	// &
0x0E,0x00,0x00,0x00,0x00,	// '
0x6C,0x82,0x82,0x82,0x00,	// (
0x00,0x82,0x82,0x82,0x6C,	// )
0x0C,0x12,0x12,0x12,0x0C,	// *
0x00,0x10,0x10,0x10,0xEE,	// +
0xE0,0x00,0x00,0x00,0x00,	// ,
0x00,0x10,0x10,0x10,0x00,	// -
0x00,0x80,0x80,0x80,0x00,	// .
0xE0,0x10,0x10,0x10,0x0E,	// slash
0x6C,0x82,0x82,0x82,0x6C,	// 0
0x00,0x00,0x00,0x00,0xEE,	// 1
0x60,0x92,0x92,0x92,0x0C,	// 2
0x00,0x92,0x92,0x92,0x6C,	// 3
0x0E,0x10,0x10,0x10,0xEE,	// 4
0x0C,0x92,0x92,0x92,0x60,	// 5
0x6C,0x92,0x92,0x92,0x60,	// 6
0x00,0x02,0x02,0x02,0xEC,	// 7
0x6C,0x92,0x92,0x92,0x6C,	// 8
0x0C,0x92,0x92,0x92,0x6C,	// 9
0x00,0x00,0x00,0x00,0x00,	// :
0xE0,0x02,0x02,0x02,0x00,	// ;
0x00,0x10,0x10,0x10,0xEE,	// <
0x00,0x90,0x90,0x90,0x00,	// =
0xEE,0x10,0x10,0x10,0x00,	// >
0xE0,0x12,0x12,0x12,0x0C,	// ?

0x00,0x00,0x00,0x00,0x00, 	// @
0xEC,0x12,0x12,0x12,0xEC, 	// A
0x6E,0x90,0x90,0x90,0x60,	// B	
0x6C,0x82,0x82,0x82,0x00,	// C
0x60,0x90,0x90,0x90,0x6E,	// D
0x6C,0x92,0x92,0x92,0x00,	// E
0xEC,0x12,0x12,0x12,0x00,	// F
0x6C,0x82,0x82,0x82,0x60,	// G
0xEE,0x10,0x10,0x10,0xE0,	// H
0x00,0x00,0x00,0x00,0xEE,	// I
0x00,0x80,0x80,0x80,0x6E,	// J
0xEE,0x10,0x10,0x10,0x00,	// K
0x6E,0x80,0x80,0x80,0x00,	// L
0xEC,0x02,0x02,0x02,0xEC,	// M
0xE0,0x10,0x10,0x10,0xE0,	// N
0x60,0x90,0x90,0x90,0x60,	// O
0xEC,0x12,0x12,0x12,0x0C,	// P
0x0C,0x12,0x12,0x12,0xEC,	// Q
0xE0,0x10,0x10,0x10,0x00,	// R
0x0C,0x92,0x92,0x92,0x60,	// S
0x6E,0x90,0x90,0x90,0x00,	// T
0x70,0x80,0x80,0x80,0x70,	// U
0xEE,0x10,0x10,0x10,0x1E,	// V
0x6E,0x80,0x80,0x80,0x6E,	// W
0xEE,0x10,0x10,0x10,0xEE,	// X
0x0E,0x90,0x90,0x90,0x6E,	// Y
0x60,0x92,0x92,0x92,0x0C,	// Z
0x6C,0x82,0x82,0x82,0x00,	// [
0x0E,0x10,0x10,0x10,0xE0,	// antislash
0x00,0x82,0x82,0x82,0x6C,	// ]
0x0C,0x02,0x02,0x02,0x0C,	// ^
0x00,0x80,0x80,0x80,0x00	// _
};


#endif